# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _oscillator_cpp
else:
    import _oscillator_cpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def BvdP(t, y, ydot):
    return _oscillator_cpp.BvdP(t, y, ydot)

def Pertrubation(y, dkick):
    return _oscillator_cpp.Pertrubation(y, dkick)

def Make_step(y):
    return _oscillator_cpp.Make_step(y)

def init(nosc_, epsilon_, frrms_):
    return _oscillator_cpp.init(nosc_, epsilon_, frrms_)

def Calc_mfx(y):
    return _oscillator_cpp.Calc_mfx(y)

def Calc_mfy(y):
    return _oscillator_cpp.Calc_mfy(y)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _oscillator_cpp.doubleArray_swiginit(self, _oscillator_cpp.new_doubleArray(nelements))
    __swig_destroy__ = _oscillator_cpp.delete_doubleArray

    def __getitem__(self, index):
        return _oscillator_cpp.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _oscillator_cpp.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _oscillator_cpp.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _oscillator_cpp.doubleArray_frompointer(t)

# Register doubleArray in _oscillator_cpp:
_oscillator_cpp.doubleArray_swigregister(doubleArray)

def new_doubleP():
    return _oscillator_cpp.new_doubleP()

def copy_doubleP(value):
    return _oscillator_cpp.copy_doubleP(value)

def delete_doubleP(obj):
    return _oscillator_cpp.delete_doubleP(obj)

def doubleP_assign(obj, value):
    return _oscillator_cpp.doubleP_assign(obj, value)

def doubleP_value(obj):
    return _oscillator_cpp.doubleP_value(obj)

